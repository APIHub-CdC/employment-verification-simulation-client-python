# coding: utf-8

"""
    API Employment Verification Sandbox

    This API lets you verify a person employment status. If a person has a job it also returns the industrial sector and the industry COVID risk segment.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@circulodecredito.com.mx
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apihub_emplotmentverification_client.api_client import ApiClient


class EmploymentVerificationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_employment_verification(self, x_api_key, inquiry_id, **kwargs):  # noqa: E501
        """Returns the employment verification process payload.  # noqa: E501

        <p>Returns the employment verification process payload associated with the inquiry. The inquiry is identified by the <samp>{inquiryId}</samp> path parameter.</p><p>Remember the inquiry status of every employment verification process gives you more information about the process stage.</p><p><b>Inquiry Status</b></p><table border=\"1\"><tr align=\"center\"><td><h4>Received Inquiry</h4></td><td width=\"10%\"><h4>RC</h4></td><td align=\"left\">Círculo Laboral has received the employment verification inquiry. Círculo Laboral will begin processing it as soon as possible.</td></tr><tr align=\"center\"><td><h4>Sending Notification</h4></td><td width=\"10%\"><h4>SN</h4></td><td align=\"left\">Círculo Laboral has processed the inquiry. Círculo Laboral is sending the event notification through the API Hub.</td></tr><tr align=\"center\"><td><h4>Delivered Notification</h4></td><td width=\"10%\"><h4>DN</h4></td><td align=\"left\">Círculo Laboral has finished the processing of the inquiry. Círculo Laboral sent the notification to the customer through API Hub and it received the respective acknowledge.</td></tr><tr align=\"center\"><td><h4>Not Delivered Notification</h4></td><td width=\"10%\"><h4>NDN</h4></td><td align=\"left\">Círculo Laboral has completed the processing of the inquiry. Círculo Laboral tried to send the notification to the customer’s API on several times, however, it never got the acknowledge from the customer.</td></tr><tr align=\"center\"><td><h4>Consumed Inquiry</h4></td><td width=\"10%\"><h4>CI</h4></td><td align=\"left\">The customer has consumed the response payload associated with the inquiry regardless of the outcome of the notification process.</td></tr><tr align=\"center\"><td><h4>Expired Inquiry</h4></td><td width=\"10%\"><h4>EI</h4></td><td align=\"left\">The inquiry and the associated result have been archived. Only inquiries that have been made in the last 90 days will be shown.</td></tr></table><p>When you create a subscription in the Sandbox environment for listening to the \"employmentcheck\" event, we create some inquiries in order you could test this method.</p><p>You could get the payload from different inquiries in different employment verification process stages (Inquiry Status).</p><p><b>Sandbox Use Cases</b></p><table border=\"1\"><tr><th>Use case</th><th width=\"10%\">Inquiry Status</th><th width=\"50%\">InquiryId</th></tr><tr align=\"center\"><td  align=\"left\">The employment verification process associated with the <samp>{inquiryId}</samp> path parameter has not yet been completed. The request does not include nss.</td><td><h4>RI</h4></td><td><samp>629d85a8-9dd2-4433-bec9-eb17ee6441dc</samp></td></tr><tr align=\"center\"><td  align=\"left\">The employment verification process associated with the <samp>{inquiryId}</samp> path parameter has not yet been completed. The request includes nss.</td><td><h4>RI</h4></td><td><samp>2423c91d-be5d-4092-9348-952597ca2849</samp></td></tr><tr align=\"center\"><td  align=\"left\">The output of the employment verification process associated with the <samp>{inquiryId}</samp> has been consumed. The request does not include nss.</td><td><h4>CI</h4></td><td><samp>a3d7e85f-1578-4713-8190-1a20691d549d</samp></td></tr><tr align=\"center\"><td  align=\"left\">The output of the employment verification process associated with the <samp>{inquiryId}</samp> has been consumed. The request includes nss.</td><td><h4>CI</h4></td><td><samp>ad59e561-f759-4312-8af6-13f43d9fd936</samp></td></tr></table>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_employment_verification(x_api_key, inquiry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str inquiry_id: The identifier of the inquiry. (required)
        :return: AckSuccessEVConsumption
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_employment_verification_with_http_info(x_api_key, inquiry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_employment_verification_with_http_info(x_api_key, inquiry_id, **kwargs)  # noqa: E501
            return data

    def get_employment_verification_with_http_info(self, x_api_key, inquiry_id, **kwargs):  # noqa: E501
        """Returns the employment verification process payload.  # noqa: E501

        <p>Returns the employment verification process payload associated with the inquiry. The inquiry is identified by the <samp>{inquiryId}</samp> path parameter.</p><p>Remember the inquiry status of every employment verification process gives you more information about the process stage.</p><p><b>Inquiry Status</b></p><table border=\"1\"><tr align=\"center\"><td><h4>Received Inquiry</h4></td><td width=\"10%\"><h4>RC</h4></td><td align=\"left\">Círculo Laboral has received the employment verification inquiry. Círculo Laboral will begin processing it as soon as possible.</td></tr><tr align=\"center\"><td><h4>Sending Notification</h4></td><td width=\"10%\"><h4>SN</h4></td><td align=\"left\">Círculo Laboral has processed the inquiry. Círculo Laboral is sending the event notification through the API Hub.</td></tr><tr align=\"center\"><td><h4>Delivered Notification</h4></td><td width=\"10%\"><h4>DN</h4></td><td align=\"left\">Círculo Laboral has finished the processing of the inquiry. Círculo Laboral sent the notification to the customer through API Hub and it received the respective acknowledge.</td></tr><tr align=\"center\"><td><h4>Not Delivered Notification</h4></td><td width=\"10%\"><h4>NDN</h4></td><td align=\"left\">Círculo Laboral has completed the processing of the inquiry. Círculo Laboral tried to send the notification to the customer’s API on several times, however, it never got the acknowledge from the customer.</td></tr><tr align=\"center\"><td><h4>Consumed Inquiry</h4></td><td width=\"10%\"><h4>CI</h4></td><td align=\"left\">The customer has consumed the response payload associated with the inquiry regardless of the outcome of the notification process.</td></tr><tr align=\"center\"><td><h4>Expired Inquiry</h4></td><td width=\"10%\"><h4>EI</h4></td><td align=\"left\">The inquiry and the associated result have been archived. Only inquiries that have been made in the last 90 days will be shown.</td></tr></table><p>When you create a subscription in the Sandbox environment for listening to the \"employmentcheck\" event, we create some inquiries in order you could test this method.</p><p>You could get the payload from different inquiries in different employment verification process stages (Inquiry Status).</p><p><b>Sandbox Use Cases</b></p><table border=\"1\"><tr><th>Use case</th><th width=\"10%\">Inquiry Status</th><th width=\"50%\">InquiryId</th></tr><tr align=\"center\"><td  align=\"left\">The employment verification process associated with the <samp>{inquiryId}</samp> path parameter has not yet been completed. The request does not include nss.</td><td><h4>RI</h4></td><td><samp>629d85a8-9dd2-4433-bec9-eb17ee6441dc</samp></td></tr><tr align=\"center\"><td  align=\"left\">The employment verification process associated with the <samp>{inquiryId}</samp> path parameter has not yet been completed. The request includes nss.</td><td><h4>RI</h4></td><td><samp>2423c91d-be5d-4092-9348-952597ca2849</samp></td></tr><tr align=\"center\"><td  align=\"left\">The output of the employment verification process associated with the <samp>{inquiryId}</samp> has been consumed. The request does not include nss.</td><td><h4>CI</h4></td><td><samp>a3d7e85f-1578-4713-8190-1a20691d549d</samp></td></tr><tr align=\"center\"><td  align=\"left\">The output of the employment verification process associated with the <samp>{inquiryId}</samp> has been consumed. The request includes nss.</td><td><h4>CI</h4></td><td><samp>ad59e561-f759-4312-8af6-13f43d9fd936</samp></td></tr></table>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_employment_verification_with_http_info(x_api_key, inquiry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str inquiry_id: The identifier of the inquiry. (required)
        :return: AckSuccessEVConsumption
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'inquiry_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_employment_verification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_employment_verification`")  # noqa: E501
        # verify the required parameter 'inquiry_id' is set
        if ('inquiry_id' not in params or
                params['inquiry_id'] is None):
            raise ValueError("Missing the required parameter `inquiry_id` when calling `get_employment_verification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in params:
            path_params['inquiryId'] = params['inquiry_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tp/cl/v1/employmentverifications/{inquiryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckSuccessEVConsumption',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_employment_verifications(self, x_api_key, **kwargs):  # noqa: E501
        """Returns the list of employment verification processes you have requested.  # noqa: E501

        Returns the list of employment verification processes you have requested. You could filter the rows by date using the {startAt} and {endAt} parameters. You could filter the rows by inquiry status using the {inquiryStatus} parameter and the process result using the {sucessCheck} parameter. You could use the {page} and {perPage} parameters in order to navigate through the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_employment_verifications(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str page: Page to query.
        :param str per_page: Rows per page.
        :param datetime start_at: Initial date. As defined by date-time - RFC3339.
        :param datetime end_at: End date.  As defined by date-time - RFC3339.
        :param str inquiry_status: Inquiry status.
        :param str success_check: Inquiry process result.
        :return: EmploymentVerificationMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_employment_verifications_with_http_info(x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_employment_verifications_with_http_info(x_api_key, **kwargs)  # noqa: E501
            return data

    def get_employment_verifications_with_http_info(self, x_api_key, **kwargs):  # noqa: E501
        """Returns the list of employment verification processes you have requested.  # noqa: E501

        Returns the list of employment verification processes you have requested. You could filter the rows by date using the {startAt} and {endAt} parameters. You could filter the rows by inquiry status using the {inquiryStatus} parameter and the process result using the {sucessCheck} parameter. You could use the {page} and {perPage} parameters in order to navigate through the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_employment_verifications_with_http_info(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str page: Page to query.
        :param str per_page: Rows per page.
        :param datetime start_at: Initial date. As defined by date-time - RFC3339.
        :param datetime end_at: End date.  As defined by date-time - RFC3339.
        :param str inquiry_status: Inquiry status.
        :param str success_check: Inquiry process result.
        :return: EmploymentVerificationMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'page', 'per_page', 'start_at', 'end_at', 'inquiry_status', 'success_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_employment_verifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_employment_verifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'end_at' in params:
            query_params.append(('endAt', params['end_at']))  # noqa: E501
        if 'inquiry_status' in params:
            query_params.append(('inquiryStatus', params['inquiry_status']))  # noqa: E501
        if 'success_check' in params:
            query_params.append(('successCheck', params['success_check']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tp/cl/v1/employmentverifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmploymentVerificationMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_employment_verification(self, x_api_key, request, **kwargs):  # noqa: E501
        """Requests a person employment verification process.  # noqa: E501

        <p>Requests a person employment verification process.</p><p>The Sandbox environment has several use cases you can use to prototype your app. In this document we only have shown some of them. Please go to https://developer.circulodecredito.com.mx/en/tp/products/cl/employmentverification and download the Postman Collection with the complete data set.</p><p>Note: Replace the field<samp >${subscriptionId}</samp>ith your subscription, likewise replace <samp>${employmentVerificationRequestId}</samp>ith an unique UUID.</p><p><b>Sandbox Use Cases</b></p><table border=\"1\"><tr><th width=\"5%\">Use case number</th><th width=\"45%\">Description</th><th width=\"50%\">JSON request</th></tr><tr><td align=\"center\">41</td><td>The person has a formal employment. The COVID Industry Risk Segment from his employer is Low.</td><td><samp>{\"curp\": \"PUPJ970229HDFZZG39\", \"email\": \"api39@circulodecredito.com.mx\", \"employmentVerificationRequestId\": \"${employmentVerificationRequestId}\", \"subscriptionId\": \"${subscriptionId}\"}</samp></td></tr><tr><td align=\"center\">42</td><td>The person has a formal employment. The COVID Industry Risk Segment from his employer is Medium.</td><td><samp>{\"curp\": \"PUPJ970229HDFZZG40\", \"email\": \"api40@circulodecredito.com.mx\", \"employmentVerificationRequestId\": \"${employmentVerificationRequestId}\", \"subscriptionId\": \"${subscriptionId}\"}</samp></td></tr><tr><td align=\"center\">43</td><td>The person has a formal employment. The COVID Industry Risk Segment from his employer is High.</td><td><samp>{\"curp\": \"PUPJ970229HDFZZG41\", \"email\": \"api41@circulodecredito.com.mx\", \"employmentVerificationRequestId\": \"${employmentVerificationRequestId}\", \"subscriptionId\": \"${subscriptionId}\"}</samp></td></tr><tr><td align=\"center\">57</td><td>The person does not have a formal employment.</td><td><samp>{\"curp\": \"PUPJ970229HDFZZG57\", \"email\": \"api57@circulodecredito.com.mx\", \"employmentVerificationRequestId\": \"${employmentVerificationRequestId}</samp></td></tr></table>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_employment_verification(x_api_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param EmploymentVerification request: Input parameters in order to start a employment verification process. (required)
        :return: AckEVRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_employment_verification_with_http_info(x_api_key, request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_employment_verification_with_http_info(x_api_key, request, **kwargs)  # noqa: E501
            return data

    def post_employment_verification_with_http_info(self, x_api_key, request, **kwargs):  # noqa: E501
        """Requests a person employment verification process.  # noqa: E501

        <p>Requests a person employment verification process.</p><p>The Sandbox environment has several use cases you can use to prototype your app. In this document we only have shown some of them. Please go to https://developer.circulodecredito.com.mx/en/tp/products/cl/employmentverification and download the Postman Collection with the complete data set.</p><p>Note: Replace the field<samp >${subscriptionId}</samp>ith your subscription, likewise replace <samp>${employmentVerificationRequestId}</samp>ith an unique UUID.</p><p><b>Sandbox Use Cases</b></p><table border=\"1\"><tr><th width=\"5%\">Use case number</th><th width=\"45%\">Description</th><th width=\"50%\">JSON request</th></tr><tr><td align=\"center\">41</td><td>The person has a formal employment. The COVID Industry Risk Segment from his employer is Low.</td><td><samp>{\"curp\": \"PUPJ970229HDFZZG39\", \"email\": \"api39@circulodecredito.com.mx\", \"employmentVerificationRequestId\": \"${employmentVerificationRequestId}\", \"subscriptionId\": \"${subscriptionId}\"}</samp></td></tr><tr><td align=\"center\">42</td><td>The person has a formal employment. The COVID Industry Risk Segment from his employer is Medium.</td><td><samp>{\"curp\": \"PUPJ970229HDFZZG40\", \"email\": \"api40@circulodecredito.com.mx\", \"employmentVerificationRequestId\": \"${employmentVerificationRequestId}\", \"subscriptionId\": \"${subscriptionId}\"}</samp></td></tr><tr><td align=\"center\">43</td><td>The person has a formal employment. The COVID Industry Risk Segment from his employer is High.</td><td><samp>{\"curp\": \"PUPJ970229HDFZZG41\", \"email\": \"api41@circulodecredito.com.mx\", \"employmentVerificationRequestId\": \"${employmentVerificationRequestId}\", \"subscriptionId\": \"${subscriptionId}\"}</samp></td></tr><tr><td align=\"center\">57</td><td>The person does not have a formal employment.</td><td><samp>{\"curp\": \"PUPJ970229HDFZZG57\", \"email\": \"api57@circulodecredito.com.mx\", \"employmentVerificationRequestId\": \"${employmentVerificationRequestId}</samp></td></tr></table>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_employment_verification_with_http_info(x_api_key, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param EmploymentVerification request: Input parameters in order to start a employment verification process. (required)
        :return: AckEVRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_employment_verification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `post_employment_verification`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_employment_verification`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tp/cl/v1/employmentverifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AckEVRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
