# coding: utf-8

"""
    API Employment Verification Sandbox

    This API lets you verify a person employment status. If a person has a job it also returns the industrial sector and the industry COVID risk segment.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@circulodecredito.com.mx
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SuccessEVConsumption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request': 'EmploymentVerification',
        'names': 'str',
        'birthday': 'str',
        'work_status': 'str',
        'valid_until': 'date',
        'industry': 'CatalogIndustry',
        'industry_risk_segment': 'str',
        'nss_check': 'bool'
    }

    attribute_map = {
        'request': 'request',
        'names': 'names',
        'birthday': 'birthday',
        'work_status': 'workStatus',
        'valid_until': 'validUntil',
        'industry': 'industry',
        'industry_risk_segment': 'industryRiskSegment',
        'nss_check': 'nssCheck'
    }

    def __init__(self, request=None, names=None, birthday=None, work_status=None, valid_until=None, industry=None, industry_risk_segment=None, nss_check=None):  # noqa: E501
        """SuccessEVConsumption - a model defined in Swagger"""  # noqa: E501

        self._request = None
        self._names = None
        self._birthday = None
        self._work_status = None
        self._valid_until = None
        self._industry = None
        self._industry_risk_segment = None
        self._nss_check = None
        self.discriminator = None

        if request is not None:
            self.request = request
        if names is not None:
            self.names = names
        if birthday is not None:
            self.birthday = birthday
        if work_status is not None:
            self.work_status = work_status
        if valid_until is not None:
            self.valid_until = valid_until
        if industry is not None:
            self.industry = industry
        if industry_risk_segment is not None:
            self.industry_risk_segment = industry_risk_segment
        if nss_check is not None:
            self.nss_check = nss_check

    @property
    def request(self):
        """Gets the request of this SuccessEVConsumption.  # noqa: E501


        :return: The request of this SuccessEVConsumption.  # noqa: E501
        :rtype: EmploymentVerification
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this SuccessEVConsumption.


        :param request: The request of this SuccessEVConsumption.  # noqa: E501
        :type: EmploymentVerification
        """

        self._request = request

    @property
    def names(self):
        """Gets the names of this SuccessEVConsumption.  # noqa: E501

        Concatenation of firstname and surname.  # noqa: E501

        :return: The names of this SuccessEVConsumption.  # noqa: E501
        :rtype: str
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this SuccessEVConsumption.

        Concatenation of firstname and surname.  # noqa: E501

        :param names: The names of this SuccessEVConsumption.  # noqa: E501
        :type: str
        """

        self._names = names

    @property
    def birthday(self):
        """Gets the birthday of this SuccessEVConsumption.  # noqa: E501

        Birthday. As defined by full-date RFC3339.  # noqa: E501

        :return: The birthday of this SuccessEVConsumption.  # noqa: E501
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this SuccessEVConsumption.

        Birthday. As defined by full-date RFC3339.  # noqa: E501

        :param birthday: The birthday of this SuccessEVConsumption.  # noqa: E501
        :type: str
        """

        self._birthday = birthday

    @property
    def work_status(self):
        """Gets the work_status of this SuccessEVConsumption.  # noqa: E501

        Work status.  # noqa: E501

        :return: The work_status of this SuccessEVConsumption.  # noqa: E501
        :rtype: str
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this SuccessEVConsumption.

        Work status.  # noqa: E501

        :param work_status: The work_status of this SuccessEVConsumption.  # noqa: E501
        :type: str
        """
        allowed_values = ["W", "NW"]  # noqa: E501
        if work_status not in allowed_values:
            raise ValueError(
                "Invalid value for `work_status` ({0}), must be one of {1}"  # noqa: E501
                .format(work_status, allowed_values)
            )

        self._work_status = work_status

    @property
    def valid_until(self):
        """Gets the valid_until of this SuccessEVConsumption.  # noqa: E501

        Last date the worker contributed to social security. As defined by full-date RFC3339.  # noqa: E501

        :return: The valid_until of this SuccessEVConsumption.  # noqa: E501
        :rtype: date
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this SuccessEVConsumption.

        Last date the worker contributed to social security. As defined by full-date RFC3339.  # noqa: E501

        :param valid_until: The valid_until of this SuccessEVConsumption.  # noqa: E501
        :type: date
        """

        self._valid_until = valid_until

    @property
    def industry(self):
        """Gets the industry of this SuccessEVConsumption.  # noqa: E501


        :return: The industry of this SuccessEVConsumption.  # noqa: E501
        :rtype: CatalogIndustry
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this SuccessEVConsumption.


        :param industry: The industry of this SuccessEVConsumption.  # noqa: E501
        :type: CatalogIndustry
        """

        self._industry = industry

    @property
    def industry_risk_segment(self):
        """Gets the industry_risk_segment of this SuccessEVConsumption.  # noqa: E501

        Industry Covid Risk Segment.<p><table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>H</td><td>High</td></tr><tr><td>M</td><td>Medium</td></tr><tr><td>L</td><td>Low</td></tr></tbody></table></p>  # noqa: E501

        :return: The industry_risk_segment of this SuccessEVConsumption.  # noqa: E501
        :rtype: str
        """
        return self._industry_risk_segment

    @industry_risk_segment.setter
    def industry_risk_segment(self, industry_risk_segment):
        """Sets the industry_risk_segment of this SuccessEVConsumption.

        Industry Covid Risk Segment.<p><table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>H</td><td>High</td></tr><tr><td>M</td><td>Medium</td></tr><tr><td>L</td><td>Low</td></tr></tbody></table></p>  # noqa: E501

        :param industry_risk_segment: The industry_risk_segment of this SuccessEVConsumption.  # noqa: E501
        :type: str
        """
        allowed_values = ["H", "M", "L"]  # noqa: E501
        if industry_risk_segment not in allowed_values:
            raise ValueError(
                "Invalid value for `industry_risk_segment` ({0}), must be one of {1}"  # noqa: E501
                .format(industry_risk_segment, allowed_values)
            )

        self._industry_risk_segment = industry_risk_segment

    @property
    def nss_check(self):
        """Gets the nss_check of this SuccessEVConsumption.  # noqa: E501

        True if the nss field sent in the request is the same one that we obtained through the employment verification process.  # noqa: E501

        :return: The nss_check of this SuccessEVConsumption.  # noqa: E501
        :rtype: bool
        """
        return self._nss_check

    @nss_check.setter
    def nss_check(self, nss_check):
        """Sets the nss_check of this SuccessEVConsumption.

        True if the nss field sent in the request is the same one that we obtained through the employment verification process.  # noqa: E501

        :param nss_check: The nss_check of this SuccessEVConsumption.  # noqa: E501
        :type: bool
        """

        self._nss_check = nss_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuccessEVConsumption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuccessEVConsumption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
