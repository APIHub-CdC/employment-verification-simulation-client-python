# coding: utf-8

"""
    API Employment Verification Sandbox

    This API lets you verify a person employment status. If a person has a job it also returns the industrial sector and the industry COVID risk segment.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@circulodecredito.com.mx
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EmploymentVerification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employment_verification_request_id': 'str',
        'subscription_id': 'str',
        'inquiry_id': 'str',
        'curp': 'str',
        'nss': 'str',
        'email': 'str',
        'inquiry_status': 'str',
        'success_check': 'bool'
    }

    attribute_map = {
        'employment_verification_request_id': 'employmentVerificationRequestId',
        'subscription_id': 'subscriptionId',
        'inquiry_id': 'inquiryId',
        'curp': 'curp',
        'nss': 'nss',
        'email': 'email',
        'inquiry_status': 'inquiryStatus',
        'success_check': 'successCheck'
    }

    def __init__(self, employment_verification_request_id=None, subscription_id=None, inquiry_id=None, curp=None, nss=None, email=None, inquiry_status=None, success_check=None):  # noqa: E501
        """EmploymentVerification - a model defined in Swagger"""  # noqa: E501

        self._employment_verification_request_id = None
        self._subscription_id = None
        self._inquiry_id = None
        self._curp = None
        self._nss = None
        self._email = None
        self._inquiry_status = None
        self._success_check = None
        self.discriminator = None

        self.employment_verification_request_id = employment_verification_request_id
        self.subscription_id = subscription_id
        if inquiry_id is not None:
            self.inquiry_id = inquiry_id
        self.curp = curp
        if nss is not None:
            self.nss = nss
        self.email = email
        if inquiry_status is not None:
            self.inquiry_status = inquiry_status
        if success_check is not None:
            self.success_check = success_check

    @property
    def employment_verification_request_id(self):
        """Gets the employment_verification_request_id of this EmploymentVerification.  # noqa: E501

        The identifier of the employment verification request given by the API consumer (UUID).  # noqa: E501

        :return: The employment_verification_request_id of this EmploymentVerification.  # noqa: E501
        :rtype: str
        """
        return self._employment_verification_request_id

    @employment_verification_request_id.setter
    def employment_verification_request_id(self, employment_verification_request_id):
        """Sets the employment_verification_request_id of this EmploymentVerification.

        The identifier of the employment verification request given by the API consumer (UUID).  # noqa: E501

        :param employment_verification_request_id: The employment_verification_request_id of this EmploymentVerification.  # noqa: E501
        :type: str
        """
        if employment_verification_request_id is None:
            raise ValueError("Invalid value for `employment_verification_request_id`, must not be `None`")  # noqa: E501

        self._employment_verification_request_id = employment_verification_request_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this EmploymentVerification.  # noqa: E501

        The API Hub event subscription identifier (UUID).  # noqa: E501

        :return: The subscription_id of this EmploymentVerification.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this EmploymentVerification.

        The API Hub event subscription identifier (UUID).  # noqa: E501

        :param subscription_id: The subscription_id of this EmploymentVerification.  # noqa: E501
        :type: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def inquiry_id(self):
        """Gets the inquiry_id of this EmploymentVerification.  # noqa: E501

        The employment verification process identifier given by Círculo de Crédito.  # noqa: E501

        :return: The inquiry_id of this EmploymentVerification.  # noqa: E501
        :rtype: str
        """
        return self._inquiry_id

    @inquiry_id.setter
    def inquiry_id(self, inquiry_id):
        """Sets the inquiry_id of this EmploymentVerification.

        The employment verification process identifier given by Círculo de Crédito.  # noqa: E501

        :param inquiry_id: The inquiry_id of this EmploymentVerification.  # noqa: E501
        :type: str
        """

        self._inquiry_id = inquiry_id

    @property
    def curp(self):
        """Gets the curp of this EmploymentVerification.  # noqa: E501

        Clave Única de Registro de población for its initials in Spanish (CURP)  # noqa: E501

        :return: The curp of this EmploymentVerification.  # noqa: E501
        :rtype: str
        """
        return self._curp

    @curp.setter
    def curp(self, curp):
        """Sets the curp of this EmploymentVerification.

        Clave Única de Registro de población for its initials in Spanish (CURP)  # noqa: E501

        :param curp: The curp of this EmploymentVerification.  # noqa: E501
        :type: str
        """
        if curp is None:
            raise ValueError("Invalid value for `curp`, must not be `None`")  # noqa: E501
        if curp is not None and len(curp) > 18:
            raise ValueError("Invalid value for `curp`, length must be less than or equal to `18`")  # noqa: E501
        if curp is not None and len(curp) < 18:
            raise ValueError("Invalid value for `curp`, length must be greater than or equal to `18`")  # noqa: E501

        self._curp = curp

    @property
    def nss(self):
        """Gets the nss of this EmploymentVerification.  # noqa: E501

        Número de Seguridad Social for its initials in Spanish (NSS)  # noqa: E501

        :return: The nss of this EmploymentVerification.  # noqa: E501
        :rtype: str
        """
        return self._nss

    @nss.setter
    def nss(self, nss):
        """Sets the nss of this EmploymentVerification.

        Número de Seguridad Social for its initials in Spanish (NSS)  # noqa: E501

        :param nss: The nss of this EmploymentVerification.  # noqa: E501
        :type: str
        """
        if nss is not None and len(nss) > 11:
            raise ValueError("Invalid value for `nss`, length must be less than or equal to `11`")  # noqa: E501
        if nss is not None and len(nss) < 11:
            raise ValueError("Invalid value for `nss`, length must be greater than or equal to `11`")  # noqa: E501

        self._nss = nss

    @property
    def email(self):
        """Gets the email of this EmploymentVerification.  # noqa: E501

        email  # noqa: E501

        :return: The email of this EmploymentVerification.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmploymentVerification.

        email  # noqa: E501

        :param email: The email of this EmploymentVerification.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) > 80:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `80`")  # noqa: E501
        if email is not None and len(email) < 3:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `3`")  # noqa: E501

        self._email = email

    @property
    def inquiry_status(self):
        """Gets the inquiry_status of this EmploymentVerification.  # noqa: E501

        Inquiry status.  # noqa: E501

        :return: The inquiry_status of this EmploymentVerification.  # noqa: E501
        :rtype: str
        """
        return self._inquiry_status

    @inquiry_status.setter
    def inquiry_status(self, inquiry_status):
        """Sets the inquiry_status of this EmploymentVerification.

        Inquiry status.  # noqa: E501

        :param inquiry_status: The inquiry_status of this EmploymentVerification.  # noqa: E501
        :type: str
        """
        allowed_values = ["RI", "SN", "DN", "DND", "CI"]  # noqa: E501
        if inquiry_status not in allowed_values:
            raise ValueError(
                "Invalid value for `inquiry_status` ({0}), must be one of {1}"  # noqa: E501
                .format(inquiry_status, allowed_values)
            )

        self._inquiry_status = inquiry_status

    @property
    def success_check(self):
        """Gets the success_check of this EmploymentVerification.  # noqa: E501

        It is true if the employment verification process ended successfully.  # noqa: E501

        :return: The success_check of this EmploymentVerification.  # noqa: E501
        :rtype: bool
        """
        return self._success_check

    @success_check.setter
    def success_check(self, success_check):
        """Sets the success_check of this EmploymentVerification.

        It is true if the employment verification process ended successfully.  # noqa: E501

        :param success_check: The success_check of this EmploymentVerification.  # noqa: E501
        :type: bool
        """

        self._success_check = success_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmploymentVerification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmploymentVerification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
